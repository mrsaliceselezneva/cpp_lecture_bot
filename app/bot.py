import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from app.config import BOT_TOKEN, ADMINS
from app.db import (
    add_user, get_users, add_video, get_videos, get_all_users,
    remove_user, remove_video_by_link, search_videos_by_title
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    if text.startswith("/start"):
        if user_id in get_users():
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ.")
        elif user_id in ADMINS:
            add_user(user_id, message.from_user.first_name, message.from_user.last_name or "")
            await message.answer("üëã –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if text.startswith("/users") and user_id in ADMINS:
        users = get_all_users()
        if users:
            msg = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([str(u[0]) for u in users])
            await message.answer(msg)
        else:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ /videos ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
    if text.startswith("/videos"):
        if user_id not in get_users():
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        videos = get_videos()
        if videos:
            msg = "\n\n".join([f"*{v['title']}*\n{v['link']}" for v in videos])
            await message.answer(msg, parse_mode="Markdown")
        else:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ.")
        return

    if text.startswith("/add_user") and user_id in ADMINS:
        parts = text.split()
        if len(parts) >= 4:
            try:
                new_user_id = int(parts[1])
                first_name = parts[2]
                last_name = " ".join(parts[3:])
                add_user(new_user_id, first_name, last_name)
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} ({new_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω.")
            except ValueError:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /add_user 123456789 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
        return

    # –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if text.startswith("/add") and user_id in ADMINS:
        content = text.replace("/add", "").strip()
        if "|" in content:
            title, link = map(str.strip, content.split("|", 1))
            add_video(title, link)
            for uid in get_users():
                try:
                    await bot.send_message(uid, f"üì¢ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:\n*{title}*\n{link}", parse_mode="Markdown")
                except Exception:
                    pass
            await message.answer("‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")
        else:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä: /add –ù–∞–∑–≤–∞–Ω–∏–µ | https://...")
        return

    # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text.startswith("/del_user") and user_id in ADMINS:
        parts = text.split()
        if len(parts) == 2:
            try:
                uid = int(parts[1])
                remove_user(uid)
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
            except ValueError:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /del_user 123456789")
        return

    # –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID –∏–ª–∏ —Å—Å—ã–ª–∫–µ
    if text.startswith("/del_video") and user_id in ADMINS:
        parts = text.split(maxsplit=1)
        if len(parts) == 2:
            arg = parts[1]
            remove_video_by_link(arg)
            await message.answer("‚úÖ –í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /del_video https://...")
        return

    if text.startswith("/find"):
        keyword = text.replace("/find", "").strip()
        if not keyword:
            await message.answer("‚ùó –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find –ª–µ–∫—Ü–∏—è")
            return

        results = search_videos_by_title(keyword)
        if results:
            msg = "\n\n".join([f"*{v['title']}*\n{v['link']}" for v in results])
            await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ:\n\n{msg}", parse_mode="Markdown")
        else:
            await message.answer("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if text.startswith("/help"):
        if user_id in ADMINS:
            await message.answer(
                "ü§ñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "/start ‚Äì –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω\n"
                "/add_user ID –ò–º—è –§–∞–º–∏–ª–∏—è ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/del_user ID ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/users ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/add –ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞ ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\n"
                "/del_video —Å—Å—ã–ª–∫–∞ ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
                "/videos ‚Äì —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ\n"
                "/find –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äì –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            )
        elif user_id in get_users():
            await message.answer(
                "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start ‚Äì –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "/videos ‚Äì —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                "/find –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äì –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            )
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
