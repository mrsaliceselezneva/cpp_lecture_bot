import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from app.config import BOT_TOKEN, ADMINS
from app.db import (
    add_user, get_users, add_video, get_videos, get_all_users,
    remove_user, remove_video_by_link, search_videos_by_title,
    remove_video_by_number
)
from aiogram.types import CallbackQuery

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.callback_query()
async def handle_callback(query: CallbackQuery):
    data = query.data

    if data.startswith("approve_user:") and query.from_user.id in ADMINS:
        try:
            _, uid_str, first_name, last_name = data.split(":", 3)
            uid = int(uid_str)
            add_user(uid, first_name, last_name)
            await bot.send_message(uid, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç.")
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")
            await query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} (ID {uid}) –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await query.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")
            print(f"–û—à–∏–±–∫–∞ approve_user: {e}")


@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    if text.startswith("/start"):
        if user_id in get_users():
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ.")
        elif user_id in ADMINS:
            add_user(user_id, message.from_user.first_name, message.from_user.last_name or "")
            await message.answer("üëã –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if text.startswith("/users") and user_id in ADMINS:
        users = get_all_users()
        if users:
            msg = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([str(u[0]) for u in users])
            await message.answer(msg)
        else:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ /videos ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
    if text.startswith("/videos"):
        if user_id not in get_users():
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        videos = get_videos()
        if videos:
            msg = "\n\n".join([f"*{v['title']}*\n{v['link']}" for v in videos])
            await message.answer(msg, parse_mode="Markdown")
        else:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ.")
        return

    if text.startswith("/add_user") and user_id in ADMINS:
        lines = text.strip().split("\n")[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å "/add_user"
        if not lines:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä:\n/add_user\n123456789 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n987654321 –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤")
            return

        added = []
        for line in lines:
            parts = line.strip().split()
            if len(parts) >= 3:
                try:
                    uid = int(parts[0])
                    first_name = parts[1]
                    last_name = " ".join(parts[2:])
                    add_user(uid, first_name, last_name)
                    added.append(f"{first_name} {last_name} ({uid})")
                except ValueError:
                    continue

        if added:
            msg = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(added)
            await message.answer(msg)
        else:
            await message.answer(
                "‚ùó –ù–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä:\n/add_user\n123456789 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
        return

    # –ö–æ–º–∞–Ω–¥–∞ /add_video ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if text.startswith("/add_video") and user_id in ADMINS:
        raw_lines = text.strip().splitlines()
        lines = [line.strip() for line in raw_lines if line.strip() and not line.strip().startswith("/add")]

        if not lines:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä:\n/add\n1. –ù–∞–∑–≤–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: —Å—Å—ã–ª–∫–∞")
            return

        added = []
        skipped = []

        for line in lines:
            if ":" not in line:
                skipped.append(line)
                continue

            parts = line.split(":", 1)
            title = parts[0].strip()
            link = parts[1].strip()

            if not link.startswith("http"):
                skipped.append(line)
                continue

            try:
                add_video(title, link)
                added.append((title, link))
            except Exception as e:
                skipped.append(f"{line} (–æ—à–∏–±–∫–∞: {e})")

        if added:
            msg = "\n\n".join([f"*{title}*\n{link}" for title, link in added])
            for uid in get_users():
                try:
                    await bot.send_message(uid, f"üì¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ:\n\n{msg}", parse_mode="Markdown")
                except Exception:
                    pass
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –≤–∏–¥–µ–æ.")
        else:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç: `–ù–∞–∑–≤–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞`")

        if skipped:
            msg = "\n".join(skipped)
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏:\n{msg}")
        return

    if text.startswith("/registration") and user_id not in get_users() and user_id not in ADMINS:
        parts = text.strip().split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä: /registration –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
            return

        first_name, last_name = parts[1], parts[2]

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(
                text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {first_name} {last_name}",
                callback_data=f"approve_user:{user_id}:{first_name}:{last_name}"
            )
        )

        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üì• –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\nID: `{user_id}`\n–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception:
                pass

        await message.answer("üì® –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text.startswith("/del_user") and user_id in ADMINS:
        parts = text.split()
        if len(parts) == 2:
            try:
                uid = int(parts[1])
                remove_user(uid)
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
            except ValueError:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /del_user 123456789")
        return

    # –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID –∏–ª–∏ —Å—Å—ã–ª–∫–µ
    if text.startswith("/del_video_link") and user_id in ADMINS:
        parts = text.split(maxsplit=1)
        if len(parts) == 2:
            arg = parts[1]
            remove_video_by_link(arg)
            await message.answer("‚úÖ –í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /del_video_link https://...")
        return

    if text.startswith("/del_video_num") and user_id in ADMINS:
        parts = text.split()
        if len(parts) == 2:
            try:
                theme_num = int(parts[1])
                remove_video_by_number(theme_num)
                await message.answer(f"‚úÖ –¢–µ–º–∞ ‚Ññ{theme_num} —É–¥–∞–ª–µ–Ω–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.")
            except ValueError:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /del_video_num 2")
        return

    if text.startswith("/find"):
        keyword = text.replace("/find", "").strip()
        if not keyword:
            await message.answer("‚ùó –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find –ª–µ–∫—Ü–∏—è")
            return

        results = search_videos_by_title(keyword)
        if results:
            msg = "\n\n".join([f"*{v['title']}*\n{v['link']}" for v in results])
            await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ:\n\n{msg}", parse_mode="Markdown")
        else:
            await message.answer("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if text.startswith("/help"):
        if user_id in ADMINS:
            await message.answer(
                "ü§ñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "/start ‚Äì –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω\n\n"
                "/add_user ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                "  –ü—Ä–∏–º–µ—Ä:\n"
                "  /add_user\n"
                "  123456789 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n\n"
                "/del_user ID ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/users ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ:\n"
                "  –ü—Ä–∏–º–µ—Ä:\n"
                "  /add\n"
                "  1. –ù–∞–∑–≤–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞\n"
                "  –ù–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: —Å—Å—ã–ª–∫–∞ (–±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä)\n\n"
                "/del_video —Å—Å—ã–ª–∫–∞ ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                "/del_video_num N ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Å —Ç–µ–º–æ–π ‚ÑñN –∏ —Å–¥–≤–∏–Ω—É—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ\n\n"
                "/videos ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ\n"
                "/find –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ ‚Äì –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
                "üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /registration –ò–º—è –§–∞–º–∏–ª–∏—è,\n"
                "–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
        elif user_id in get_users():
            await message.answer(
                "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start ‚Äì –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "/videos ‚Äì —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                "/find –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ ‚Äì –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            )
        else:
            await message.answer(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑:\n"
                "/registration –ò–º—è –§–∞–º–∏–ª–∏—è"
            )
        return


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
